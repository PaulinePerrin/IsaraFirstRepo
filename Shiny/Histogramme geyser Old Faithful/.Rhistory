shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel(textOutput("title")),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
textInput("title",
"Main title :",
"Data visualization"),
selectInput("data",
"Select data input :",
choices = c("Old Faithful Geyser Data" = "faithful",
"Iris Data" = "iris",
"Motor Trend Car Road Tests" = "mtcars")),
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30),
radioButtons("color",
"Color of bins:",
choices = c("Dark gray" = "darkgray",
"Orange" = "coral",
"Light green" = "lightgreen"))
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot"),
textOutput("textBins")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$title <- renderText({
input$title
})
datasetInput <- reactive({
switch(input$data,
"faithful" = faithful$waiting,
"iris" = iris$Petal.Length,
"mtcars" = mtcars$hp)
})
output$distPlot <- renderPlot({
x    <- datasetInput()
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = input$color, border = 'white')
})
output$textBins <- renderText({
c("There are currently", input$bins, input$color, "bins.")
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
